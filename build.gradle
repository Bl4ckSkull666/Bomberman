plugins {
    id 'java'
    id "org.jetbrains.kotlin.jvm" version "1.3.71"
    id 'idea'
}

sourceCompatibility = 1.11

group = 'io.github.mdsimmo'
version = '0.4.0'

repositories {
    mavenCentral()
    jcenter()
    maven {
        // bukkits repo
        url "https://hub.spigotmc.org/nexus/content/repositories/snapshots/"
    }
    maven {
        // vaults repo
        url "https://jitpack.io"
    }
    maven {
        // world edit repo
        url "http://maven.enginehub.org/repo"
    }
}

dependencies {
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk8:1.3.71"

    compileOnly "org.bukkit:bukkit:1.15.2-R0.1-SNAPSHOT"
    testImplementation "org.bukkit:bukkit:1.15.2-R0.1-SNAPSHOT"

    compileOnly "com.github.MilkBowl:VaultAPI:1.7"
    compileOnly "com.sk89q.worldedit:worldedit-bukkit:7.1.0"
    testImplementation "com.sk89q.worldedit:worldedit-bukkit:7.1.0"
    implementation "net.objecthunter:exp4j:0.4.8"

    testCompile "junit:junit:4.+"
    testImplementation "org.mockito:mockito-core:3.3.+"
}

processResources  {
    // auto assign values in the plugin.yml
    filter {
        line ->
            line
                .replace('${name}', project.name)
                .replace('${version}', version)
    }
}

task clearOldPluginJar( type: Delete ) {
    description 'Deletes any old bomberman plugins from the server'
    if ( project.hasProperty("serverLocation" ) ) {
        delete project.fileTree( "$serverLocation/plugins/update" ) {
            include '*omberman*.jar'
        }
    }
}

task copyToServer(type: Copy, dependsOn: clearOldPluginJar ) {
    description 'Copies the plugin to the server'
    if ( project.hasProperty("serverLocation" ) ) {
        from jar
        into "$serverLocation/plugins/update"
    }
}

task install( dependsOn: [build, copyToServer] ) {
    description 'Compiles, tests and copies the code to the server'
}

jar {
    from {
        configurations.runtimeClasspath.collect {
            it.isDirectory() ? it : zipTree(it)
        }
    }
}

compileKotlin {
    kotlinOptions {
        jvmTarget = "11"
        freeCompilerArgs = ["-Xallow-result-return-type"]
    }
}
compileTestKotlin {
    kotlinOptions {
        jvmTarget = "11"
        freeCompilerArgs = ["-Xallow-result-return-type"]
    }
}